name: Test NSIS Environment

# ÊµãËØïworkflowÔºåÁî®‰∫éÈ™åËØÅGitHub Actions runner‰∏≠ÁöÑNSISÁéØÂ¢É
on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: true
        default: 'basic'
        type: choice
        options:
        - basic
        - advanced
        - full

env:
  FLUTTER_VERSION: '3.16.0'

jobs:
  test-nsis-basic:
    name: Basic NSIS Test
    runs-on: windows-latest
    if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == '' || github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check NSIS installation
      run: |
        echo "=== Checking NSIS installation ==="
        
        # Check if makensis is available
        try {
          $nsisPath = where.exe makensis
          echo "‚úÖ NSIS found at: $nsisPath"
        } catch {
          echo "‚ùå NSIS not found in PATH"
          exit 1
        }
        
        # Get NSIS version
        echo "\n=== NSIS Version Information ==="
        makensis /VERSION
        
        # Check NSIS installation directory
        echo "\n=== NSIS Installation Details ==="
        $nsisDir = Split-Path $nsisPath -Parent
        echo "NSIS Directory: $nsisDir"
        
        # List NSIS plugins
        $pluginsDir = Join-Path $nsisDir "Plugins"
        if (Test-Path $pluginsDir) {
          echo "\n=== Available NSIS Plugins ==="
          Get-ChildItem $pluginsDir -Name | Sort-Object
        }
        
        # List NSIS includes
        $includeDir = Join-Path $nsisDir "Include"
        if (Test-Path $includeDir) {
          echo "\n=== Available NSIS Includes ==="
          Get-ChildItem $includeDir -Name "*.nsh" | Sort-Object
        }
    
    - name: Install nsProcess Plugin
      run: |
        echo "=== Installing nsProcess Plugin ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        echo "NSIS Directory: $nsisDir"
        
        # Download nsProcess plugin
        echo "\n=== Downloading nsProcess Plugin ==="
        $downloadUrl = "https://nsis.sourceforge.io/mediawiki/images/1/18/NsProcess.zip"
        $downloadPath = "$env:TEMP\nsProcess.zip"
        
        try {
          Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath -UseBasicParsing
          echo "‚úÖ Downloaded nsProcess plugin to: $downloadPath"
        } catch {
          echo "‚ùå Failed to download nsProcess plugin: $_"
          exit 1
        }
        
        # Extract plugin
        echo "\n=== Extracting nsProcess Plugin ==="
        $extractPath = "$env:TEMP\nsProcess"
        if (Test-Path $extractPath) {
          Remove-Item $extractPath -Recurse -Force
        }
        
        try {
          Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
          echo "‚úÖ Extracted nsProcess plugin to: $extractPath"
        } catch {
          echo "‚ùå Failed to extract nsProcess plugin: $_"
          exit 1
        }
        
        # Copy plugin files to NSIS directory
        echo "\n=== Installing nsProcess Plugin Files ==="
        
        # Find and copy plugin DLL files
        $pluginFiles = Get-ChildItem $extractPath -Recurse -Filter "*.dll"
        $pluginsDir = Join-Path $nsisDir "Plugins"
        
        foreach ($file in $pluginFiles) {
          $destPath = Join-Path $pluginsDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to plugins directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Find and copy include files
        $includeFiles = Get-ChildItem $extractPath -Recurse -Filter "*.nsh"
        $includeDir = Join-Path $nsisDir "Include"
        
        foreach ($file in $includeFiles) {
          $destPath = Join-Path $includeDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to include directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Cleanup
        Remove-Item $downloadPath -Force -ErrorAction SilentlyContinue
        Remove-Item $extractPath -Recurse -Force -ErrorAction SilentlyContinue
        
        echo "\n‚úÖ nsProcess plugin installation completed!"
    
    - name: Verify nsProcess Plugin Installation
      run: |
        echo "=== Verifying nsProcess Plugin Installation ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        
        # Check for nsProcess plugin files
        $pluginsDir = Join-Path $nsisDir "Plugins"
        $includeDir = Join-Path $nsisDir "Include"
        
        echo "\n=== Checking Plugin Files ==="
        $nsProcessDlls = @("nsProcess.dll", "nsProcessW.dll")
        $foundDlls = @()
        
        foreach ($dll in $nsProcessDlls) {
          $dllPath = Join-Path $pluginsDir $dll
          if (Test-Path $dllPath) {
            echo "‚úÖ Found: $dll"
            $foundDlls += $dll
          } else {
            echo "‚ùå Missing: $dll"
          }
        }
        
        echo "\n=== Checking Include Files ==="
        $nsProcessIncludes = @("nsProcess.nsh")
        $foundIncludes = @()
        
        foreach ($nsh in $nsProcessIncludes) {
          $nshPath = Join-Path $includeDir $nsh
          if (Test-Path $nshPath) {
            echo "‚úÖ Found: $nsh"
            $foundIncludes += $nsh
          } else {
            echo "‚ùå Missing: $nsh"
          }
        }
        
        # Summary
        echo "\n=== Installation Summary ==="
        echo "Plugin DLLs found: $($foundDlls.Count)/$($nsProcessDlls.Count)"
        echo "Include files found: $($foundIncludes.Count)/$($nsProcessIncludes.Count)"
        
        if ($foundDlls.Count -gt 0 -and $foundIncludes.Count -gt 0) {
          echo "‚úÖ nsProcess plugin is ready to use!"
        } else {
          echo "‚ùå nsProcess plugin installation incomplete!"
          exit 1
        }
    
    - name: Test simple NSIS script
      run: |
        echo "=== Testing Simple NSIS Script ==="
        
        # Create a simple test script
        $testScript = @'
        ; Simple NSIS test script
        !define APP_NAME "NSISTest"
        !define APP_VERSION "1.0.0"
        
        Name "${APP_NAME}"
        OutFile "test-installer.exe"
        InstallDir "$TEMP\${APP_NAME}"
        
        ; Modern UI
        !include "MUI2.nsh"
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"
        
        Section "Main"
          SetOutPath "$INSTDIR"
          ; Create a test file
          FileOpen $0 "$INSTDIR\test.txt" w
          FileWrite $0 "NSIS test successful!"
          FileClose $0
        SectionEnd
        '@
        
        # Write test script to file
        $testScript | Out-File -FilePath "test.nsi" -Encoding UTF8
        
        # Compile test script
        echo "Compiling test NSIS script..."
        makensis test.nsi
        
        # Check if installer was created
        if (Test-Path "test-installer.exe") {
          $fileInfo = Get-Item "test-installer.exe"
          echo "‚úÖ Test installer created successfully!"
          echo "üìä File size: $([math]::Round($fileInfo.Length / 1KB, 2)) KB"
        } else {
          echo "‚ùå Test installer creation failed!"
          exit 1
        }
    
    - name: Test nsProcess Plugin
      run: |
        echo "=== Testing nsProcess Plugin ==="
        
        # Create a test script that uses nsProcess plugin
        $nsProcessTestScript = @'
        ; nsProcess Plugin Test Script
        !define APP_NAME "nsProcessTest"
        !define APP_VERSION "1.0.0"
        
        Name "${APP_NAME}"
        OutFile "nsprocess-test-installer.exe"
        InstallDir "$TEMP\${APP_NAME}"
        
        ; Include nsProcess plugin
        !include "nsProcess.nsh"
        
        ; Modern UI
        !include "MUI2.nsh"
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_LANGUAGE "English"
        
        Section "Main"
          SetOutPath "$INSTDIR"
          
          ; Test nsProcess plugin functions
          DetailPrint "Testing nsProcess plugin..."
          
          ; Test FindProcess function
          ${nsProcess::FindProcess} "explorer.exe" $R0
          ${If} $R0 == 0
            DetailPrint "‚úÖ FindProcess test: explorer.exe found (as expected)"
          ${Else}
            DetailPrint "‚ö†Ô∏è FindProcess test: explorer.exe not found (unexpected but not critical)"
          ${EndIf}
          
          ; Test finding a non-existent process
          ${nsProcess::FindProcess} "nonexistent-process-12345.exe" $R1
          ${If} $R1 != 0
            DetailPrint "‚úÖ FindProcess test: nonexistent process correctly not found"
          ${Else}
            DetailPrint "‚ùå FindProcess test: nonexistent process incorrectly found"
          ${EndIf}
          
          ; Create a test file to indicate success
          FileOpen $0 "$INSTDIR\nsprocess-test-result.txt" w
          FileWrite $0 "nsProcess plugin test completed successfully!$\r$\n"
          FileWrite $0 "FindProcess function is working correctly.$\r$\n"
          FileWrite $0 "Test timestamp: $$(Date) $$(Time)$\r$\n"
          FileClose $0
          
          DetailPrint "‚úÖ nsProcess plugin test completed successfully!"
          
          ; Unload the plugin
          ${nsProcess::Unload}
        SectionEnd
        '@
        
        # Write nsProcess test script to file
        $nsProcessTestScript | Out-File -FilePath "nsprocess-test.nsi" -Encoding UTF8
        
        # Compile nsProcess test script
        echo "\n=== Compiling nsProcess Test Script ==="
        try {
          makensis nsprocess-test.nsi
          echo "‚úÖ nsProcess test script compiled successfully!"
        } catch {
          echo "‚ùå nsProcess test script compilation failed: $_"
          echo "\n=== Checking for compilation errors ==="
          makensis nsprocess-test.nsi 2>&1
          exit 1
        }
        
        # Check if nsProcess test installer was created
        if (Test-Path "nsprocess-test-installer.exe") {
          $fileInfo = Get-Item "nsprocess-test-installer.exe"
          echo "‚úÖ nsProcess test installer created successfully!"
          echo "üìä File size: $([math]::Round($fileInfo.Length / 1KB, 2)) KB"
          
          # Test the installer in silent mode
          echo "\n=== Testing nsProcess Installer Execution ==="
          try {
            $testInstallDir = "$env:TEMP\nsProcessTest"
            if (Test-Path $testInstallDir) {
              Remove-Item $testInstallDir -Recurse -Force
            }
            
            # Run installer silently
            Start-Process -FilePath ".\nsprocess-test-installer.exe" -ArgumentList "/S" -Wait -NoNewWindow
            
            # Check if test result file was created
            $resultFile = "$testInstallDir\nsprocess-test-result.txt"
            if (Test-Path $resultFile) {
              echo "‚úÖ nsProcess installer executed successfully!"
              echo "\n=== Test Results ==="
              Get-Content $resultFile
            } else {
              echo "‚ö†Ô∏è nsProcess installer executed but result file not found"
            }
            
            # Cleanup test installation
            if (Test-Path $testInstallDir) {
              Remove-Item $testInstallDir -Recurse -Force -ErrorAction SilentlyContinue
            }
            
          } catch {
            echo "‚ö†Ô∏è nsProcess installer execution test failed: $_"
            echo "This is not critical as the compilation test already passed."
          }
          
        } else {
          echo "‚ùå nsProcess test installer creation failed!"
          exit 1
        }
        
        echo "\nüéâ nsProcess plugin is working correctly!"
    


  test-nsis-advanced:
    name: Advanced NSIS Test
    runs-on: windows-latest
    if: github.event.inputs.test_type == 'advanced' || github.event.inputs.test_type == 'full'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Install nsProcess Plugin
      run: |
        echo "=== Installing nsProcess Plugin for Advanced Test ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        echo "NSIS Directory: $nsisDir"
        
        # Download nsProcess plugin
        echo "\n=== Downloading nsProcess Plugin ==="
        $downloadUrl = "https://nsis.sourceforge.io/mediawiki/images/1/18/NsProcess.zip"
        $downloadPath = "$env:TEMP\nsProcess.zip"
        
        try {
          Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath -UseBasicParsing
          echo "‚úÖ Downloaded nsProcess plugin to: $downloadPath"
        } catch {
          echo "‚ùå Failed to download nsProcess plugin: $_"
          exit 1
        }
        
        # Extract plugin
        echo "\n=== Extracting nsProcess Plugin ==="
        $extractPath = "$env:TEMP\nsProcess"
        if (Test-Path $extractPath) {
          Remove-Item $extractPath -Recurse -Force
        }
        
        try {
          Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
          echo "‚úÖ Extracted nsProcess plugin to: $extractPath"
        } catch {
          echo "‚ùå Failed to extract nsProcess plugin: $_"
          exit 1
        }
        
        # Copy plugin files to NSIS directory
        echo "\n=== Installing nsProcess Plugin Files ==="
        
        # Find and copy plugin DLL files
        $pluginFiles = Get-ChildItem $extractPath -Recurse -Filter "*.dll"
        $pluginsDir = Join-Path $nsisDir "Plugins"
        
        foreach ($file in $pluginFiles) {
          $destPath = Join-Path $pluginsDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to plugins directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Find and copy include files
        $includeFiles = Get-ChildItem $extractPath -Recurse -Filter "*.nsh"
        $includeDir = Join-Path $nsisDir "Include"
        
        foreach ($file in $includeFiles) {
          $destPath = Join-Path $includeDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to include directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Cleanup
        Remove-Item $downloadPath -Force -ErrorAction SilentlyContinue
        Remove-Item $extractPath -Recurse -Force -ErrorAction SilentlyContinue
        
        echo "\n‚úÖ nsProcess plugin installation completed for advanced test!"
    
    - name: Verify nsProcess Plugin for Advanced Test
      run: |
        echo "=== Verifying nsProcess Plugin for Advanced Test ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        
        # Check for nsProcess plugin files
        $pluginsDir = Join-Path $nsisDir "Plugins"
        $includeDir = Join-Path $nsisDir "Include"
        
        echo "\n=== Checking Plugin Files ==="
        $nsProcessDlls = @("nsProcess.dll", "nsProcessW.dll")
        $foundDlls = @()
        
        foreach ($dll in $nsProcessDlls) {
          $dllPath = Join-Path $pluginsDir $dll
          if (Test-Path $dllPath) {
            echo "‚úÖ Found: $dll"
            $foundDlls += $dll
          } else {
            echo "‚ùå Missing: $dll"
          }
        }
        
        echo "\n=== Checking Include Files ==="
        $nsProcessIncludes = @("nsProcess.nsh")
        $foundIncludes = @()
        
        foreach ($nsh in $nsProcessIncludes) {
          $nshPath = Join-Path $includeDir $nsh
          if (Test-Path $nshPath) {
            echo "‚úÖ Found: $nsh"
            $foundIncludes += $nsh
          } else {
            echo "‚ùå Missing: $nsh"
          }
        }
        
        # Summary
        echo "\n=== Installation Summary ==="
        echo "Plugin DLLs found: $($foundDlls.Count)/$($nsProcessDlls.Count)"
        echo "Include files found: $($foundIncludes.Count)/$($nsProcessIncludes.Count)"
        
        if ($foundDlls.Count -gt 0 -and $foundIncludes.Count -gt 0) {
          echo "‚úÖ nsProcess plugin is ready for advanced test!"
        } else {
          echo "‚ùå nsProcess plugin installation incomplete for advanced test!"
          exit 1
        }
    
    - name: Build Flutter app (minimal)
      run: |
        echo "=== Building Flutter App for NSIS Test ==="
        flutter build windows --release
        
        # Verify build output
        $buildPath = "build\windows\x64\runner\Release"
        if (Test-Path $buildPath) {
          echo "‚úÖ Flutter build completed"
          echo "\n=== Build Output Files ==="
          Get-ChildItem $buildPath -Name | Sort-Object
        } else {
          echo "‚ùå Flutter build failed"
          exit 1
        }
    
    - name: Test project NSIS script
      run: |
        echo "=== Testing Project NSIS Script ==="
        
        # Check if project NSIS script exists
        $nsisScript = "build_tools\scripts\installer.nsi"
        if (!(Test-Path $nsisScript)) {
          echo "‚ùå Project NSIS script not found: $nsisScript"
          exit 1
        }
        
        echo "‚úÖ Found project NSIS script"
        
        # Sync version
        echo "\n=== Syncing Version ==="
        cd build_tools\scripts
        dart sync_version.dart
        
        # Create test output directory
        cd ..\..
        if (!(Test-Path "test_dist")) {
          New-Item -ItemType Directory -Path "test_dist"
        }
        
        # Test compile with project script
        echo "\n=== Compiling Project NSIS Script ==="
        cd build_tools\scripts
        
        $PROJECT_ROOT = "${{ github.workspace }}"
        $PROJECT_OUTPUT = "$PROJECT_ROOT\test_dist\QuickStart-test-windows-setup.exe"
        
        echo "Project root: $PROJECT_ROOT"
        echo "Output file: $PROJECT_OUTPUT"
        
        makensis /DPROJECT_ROOT="$PROJECT_ROOT" /DPROJECT_OUTPUT="$PROJECT_OUTPUT" installer.nsi
        
        # Verify installer creation
        cd ..\..
        if (Test-Path "test_dist\QuickStart-test-windows-setup.exe") {
          $fileInfo = Get-Item "test_dist\QuickStart-test-windows-setup.exe"
          echo "‚úÖ Project installer created successfully!"
          echo "üìä File size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
        } else {
          echo "‚ùå Project installer creation failed!"
          echo "\n=== Contents of test_dist directory ==="
          Get-ChildItem test_dist -ErrorAction SilentlyContinue
          exit 1
        }
    
    - name: Upload advanced test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nsis-test-advanced
        path: |
          test_dist/*.exe
          build_tools/scripts/installer.nsi

  test-nsis-full:
    name: Full NSIS Integration Test
    runs-on: windows-latest
    if: github.event.inputs.test_type == 'full'
    needs: [test-nsis-basic, test-nsis-advanced]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Enable Windows desktop
      run: flutter config --enable-windows-desktop
    
    - name: Get dependencies
      run: flutter pub get
    
    - name: Build Flutter app
      run: flutter build windows --release
    
    - name: Install nsProcess Plugin
      run: |
        echo "=== Installing nsProcess Plugin for Full Test ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        echo "NSIS Directory: $nsisDir"
        
        # Download nsProcess plugin
        echo "\n=== Downloading nsProcess Plugin ==="
        $downloadUrl = "https://nsis.sourceforge.io/mediawiki/images/1/18/NsProcess.zip"
        $downloadPath = "$env:TEMP\nsProcess.zip"
        
        try {
          Invoke-WebRequest -Uri $downloadUrl -OutFile $downloadPath -UseBasicParsing
          echo "‚úÖ Downloaded nsProcess plugin to: $downloadPath"
        } catch {
          echo "‚ùå Failed to download nsProcess plugin: $_"
          exit 1
        }
        
        # Extract plugin
        echo "\n=== Extracting nsProcess Plugin ==="
        $extractPath = "$env:TEMP\nsProcess"
        if (Test-Path $extractPath) {
          Remove-Item $extractPath -Recurse -Force
        }
        
        try {
          Expand-Archive -Path $downloadPath -DestinationPath $extractPath -Force
          echo "‚úÖ Extracted nsProcess plugin to: $extractPath"
        } catch {
          echo "‚ùå Failed to extract nsProcess plugin: $_"
          exit 1
        }
        
        # Copy plugin files to NSIS directory
        echo "\n=== Installing nsProcess Plugin Files ==="
        
        # Find and copy plugin DLL files
        $pluginFiles = Get-ChildItem $extractPath -Recurse -Filter "*.dll"
        $pluginsDir = Join-Path $nsisDir "Plugins"
        
        foreach ($file in $pluginFiles) {
          $destPath = Join-Path $pluginsDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to plugins directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Find and copy include files
        $includeFiles = Get-ChildItem $extractPath -Recurse -Filter "*.nsh"
        $includeDir = Join-Path $nsisDir "Include"
        
        foreach ($file in $includeFiles) {
          $destPath = Join-Path $includeDir $file.Name
          try {
            Copy-Item $file.FullName $destPath -Force
            echo "‚úÖ Copied $($file.Name) to include directory"
          } catch {
            echo "‚ùå Failed to copy $($file.Name): $_"
          }
        }
        
        # Cleanup
        Remove-Item $downloadPath -Force -ErrorAction SilentlyContinue
        Remove-Item $extractPath -Recurse -Force -ErrorAction SilentlyContinue
        
        echo "\n‚úÖ nsProcess plugin installation completed for full test!"
    
    - name: Verify nsProcess Plugin for Full Test
      run: |
        echo "=== Verifying nsProcess Plugin for Full Test ==="
        
        # Get NSIS installation directory
        $nsisPath = where.exe makensis
        $nsisDir = Split-Path $nsisPath -Parent
        
        # Check for nsProcess plugin files
        $pluginsDir = Join-Path $nsisDir "Plugins"
        $includeDir = Join-Path $nsisDir "Include"
        
        echo "\n=== Checking Plugin Files ==="
        $nsProcessDlls = @("nsProcess.dll", "nsProcessW.dll")
        $foundDlls = @()
        
        foreach ($dll in $nsProcessDlls) {
          $dllPath = Join-Path $pluginsDir $dll
          if (Test-Path $dllPath) {
            echo "‚úÖ Found: $dll"
            $foundDlls += $dll
          } else {
            echo "‚ùå Missing: $dll"
          }
        }
        
        echo "\n=== Checking Include Files ==="
        $nsProcessIncludes = @("nsProcess.nsh")
        $foundIncludes = @()
        
        foreach ($nsh in $nsProcessIncludes) {
          $nshPath = Join-Path $includeDir $nsh
          if (Test-Path $nshPath) {
            echo "‚úÖ Found: $nsh"
            $foundIncludes += $nsh
          } else {
            echo "‚ùå Missing: $nsh"
          }
        }
        
        # Summary
        echo "\n=== Installation Summary ==="
        echo "Plugin DLLs found: $($foundDlls.Count)/$($nsProcessDlls.Count)"
        echo "Include files found: $($foundIncludes.Count)/$($nsProcessIncludes.Count)"
        
        if ($foundDlls.Count -gt 0 -and $foundIncludes.Count -gt 0) {
          echo "‚úÖ nsProcess plugin is ready for full test!"
        } else {
          echo "‚ùå nsProcess plugin installation incomplete for full test!"
          exit 1
        }
    
    - name: Test complete build process
      run: |
        echo "=== Full NSIS Integration Test ==="
        
        # Simulate the complete release process
        echo "\n=== Step 1: Verify NSIS Environment ==="
        where makensis
        makensis /VERSION
        
        echo "\n=== Step 2: Sync Version ==="
        cd build_tools\scripts
        dart sync_version.dart
        
        echo "\n=== Step 3: Create Distribution Directory ==="
        cd ..\..
        if (!(Test-Path "dist")) {
          New-Item -ItemType Directory -Path "dist"
        }
        
        echo "\n=== Step 4: Build Installer ==="
        cd build_tools\scripts
        
        $PROJECT_ROOT = "${{ github.workspace }}"
        $version = "test-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
        $PROJECT_OUTPUT = "$PROJECT_ROOT\dist\QuickStart-$version-windows-setup.exe"
        
        echo "Building installer with version: $version"
        echo "Output path: $PROJECT_OUTPUT"
        
        makensis /DPROJECT_ROOT="$PROJECT_ROOT" /DPROJECT_OUTPUT="$PROJECT_OUTPUT" installer.nsi
        
        echo "\n=== Step 5: Verify Results ==="
        cd ..\..
        
        if (Test-Path "dist\QuickStart-$version-windows-setup.exe") {
          $fileInfo = Get-Item "dist\QuickStart-$version-windows-setup.exe"
          echo "‚úÖ Full integration test successful!"
          echo "üì¶ Installer: QuickStart-$version-windows-setup.exe"
          echo "üìä File size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          echo "üìÖ Created: $($fileInfo.CreationTime)"
        } else {
          echo "‚ùå Full integration test failed!"
          echo "\n=== Distribution directory contents ==="
          Get-ChildItem dist -ErrorAction SilentlyContinue
          exit 1
        }
        
        echo "\n=== Step 6: Create Portable Version ==="
        cd build\windows\x64\runner\Release
        7z a -tzip ..\..\..\..\..\dist\QuickStart-$version-Windows-Portable.zip *
        
        cd ..\..\..\..\..
        if (Test-Path "dist\QuickStart-$version-Windows-Portable.zip") {
          $zipInfo = Get-Item "dist\QuickStart-$version-Windows-Portable.zip"
          echo "‚úÖ Portable version created!"
          echo "üì¶ Portable: QuickStart-$version-Windows-Portable.zip"
          echo "üìä File size: $([math]::Round($zipInfo.Length / 1MB, 2)) MB"
        }
        
        echo "\n=== Final Results ==="
        echo "üìÅ Distribution directory contents:"
        Get-ChildItem dist | ForEach-Object {
          $size = if ($_.PSIsContainer) { "<DIR>" } else { "$([math]::Round($_.Length / 1MB, 2)) MB" }
          echo "  $($_.Name) - $size"
        }
    
    - name: Test installer execution (dry run)
      run: |
        echo "=== Testing Installer Execution ==="
        
        # Find the installer file
        $installer = Get-ChildItem dist -Filter "*-windows-setup.exe" | Select-Object -First 1
        
        if ($installer) {
          echo "Testing installer: $($installer.Name)"
          
          # Test installer help/info (non-destructive)
          try {
            # Most NSIS installers support /? for help
            $result = & $installer.FullName /? 2>&1
            echo "‚úÖ Installer responds to help command"
          } catch {
            echo "‚ÑπÔ∏è Installer help test completed (expected behavior)"
          }
          
          # Check installer properties
          $fileVersion = (Get-ItemProperty $installer.FullName).VersionInfo
          echo "\n=== Installer Properties ==="
          echo "File Version: $($fileVersion.FileVersion)"
          echo "Product Version: $($fileVersion.ProductVersion)"
          echo "Company Name: $($fileVersion.CompanyName)"
          echo "File Description: $($fileVersion.FileDescription)"
          
        } else {
          echo "‚ùå No installer found for testing"
          exit 1
        }
    
    - name: Upload full test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nsis-test-full
        path: |
          dist/*
          build_tools/scripts/installer.nsi
    
    - name: Test summary
      run: |
        echo "\nüéâ === NSIS Integration Test Summary ==="
        echo "\n‚úÖ All tests completed successfully!"
        echo "\nüìã Test Results:"
        echo "  ‚úì NSIS environment verification"
        echo "  ‚úì Simple NSIS script compilation"
        echo "  ‚úì Flutter app build"
        echo "  ‚úì Project NSIS script compilation"
        echo "  ‚úì Version synchronization"
        echo "  ‚úì Installer creation"
        echo "  ‚úì Portable version creation"
        echo "  ‚úì Installer properties verification"
        echo "\nüöÄ GitHub Actions runner is fully compatible with NSIS!"
        echo "\nüí° You can now confidently use NSIS in your release workflow."