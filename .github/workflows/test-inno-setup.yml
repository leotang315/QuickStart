name: Test Inno Setup

on:
  workflow_dispatch:

env:
  FLUTTER_VERSION: '3.29.0'

jobs:
  basic:
    name: Basic Inno Setup Test
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # - name: Check Inno Setup installation
    #   run: |
    #     echo "=== Checking Inno Setup Installation ==="
        
    #     # Check if Inno Setup is installed
    #     $innoPath = Get-Command "ISCC.exe" -ErrorAction SilentlyContinue
    #     if ($innoPath) {
    #       echo "‚úÖ Inno Setup found at: $($innoPath.Source)"
          
    #       # Check version
    #       echo "\n=== Inno Setup Version ==="
    #       & "ISCC.exe" /?
          
    #       # Check installation directory
    #       echo "\n=== Inno Setup Installation Directory ==="
    #       $innoDir = Split-Path $innoPath.Source
    #       echo "Installation directory: $innoDir"
          
    #       # List available files
    #       echo "\n=== Available Files ==="
    #       Get-ChildItem $innoDir -Name
          
    #       # # Check for language files
    #       # echo "\n=== Language Files ==="
    #       # $langDir = Join-Path $innoDir "Languages"
    #       # if (Test-Path $langDir) {
    #       #   Get-ChildItem $langDir -Name "*.isl" | ForEach-Object { echo "  - $_" }
    #       # } else {
    #       #   echo "Languages directory not found"
    #       # }
          
    #     } else {
    #       echo "‚ùå Inno Setup not found in PATH"
    #       echo "\n=== Searching for Inno Setup ==="
          
    #       # Search common installation paths
    #       $commonPaths = @(
    #         "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
    #         "C:\Program Files\Inno Setup 6\ISCC.exe",
    #         "C:\Program Files (x86)\Inno Setup 5\ISCC.exe",
    #         "C:\Program Files\Inno Setup 5\ISCC.exe"
    #       )
          
    #       foreach ($path in $commonPaths) {
    #         if (Test-Path $path) {
    #           echo "Found Inno Setup at: $path"
    #           & $path /?
    #           break
    #         }
    #       }
    #     }
    #   shell: powershell
      
    - name: Setup Inno Setup Environment
      run: |
        echo "=== Setting up Inno Setup Environment ==="
        
        # Function to find Inno Setup compiler
        function Find-InnoSetupCompiler {
          # Check in PATH first
          $pathInno = Get-Command "ISCC.exe" -ErrorAction SilentlyContinue
          if ($pathInno) {
            return $pathInno.Source
          }
          
          # Check common installation paths
          $commonPaths = @(
            "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
            "C:\Program Files\Inno Setup 6\ISCC.exe",
            "C:\Program Files (x86)\Inno Setup 5\ISCC.exe",
            "C:\Program Files\Inno Setup 5\ISCC.exe"
          )
          
          foreach ($path in $commonPaths) {
            if (Test-Path $path) {
              return $path
            }
          }
          
          return $null
        }
        
        # Find existing installation
        $innoPath = Find-InnoSetupCompiler
        
        if ($innoPath) {
          echo "‚úÖ Inno Setup found at: $innoPath"
          echo "‚ÑπÔ∏è Using existing installation"
        } else {
          echo "üì• Inno Setup not found, proceeding with installation"
          
          # Download Inno Setup
          $downloadUrl = "https://jrsoftware.org/download.php/is.exe"
          $installerPath = "$env:TEMP\innosetup-installer.exe"
          
          echo "Downloading Inno Setup from: $downloadUrl"
          Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
          
          if (Test-Path $installerPath) {
            echo "‚úÖ Download completed: $installerPath"
            echo "File size: $((Get-Item $installerPath).Length) bytes"
            
            # Install silently
            echo "\n=== Installing Inno Setup ==="
            Start-Process -FilePath $installerPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait
            
            # Find the newly installed compiler
            $innoPath = Find-InnoSetupCompiler
            
            if ($innoPath) {
              echo "‚úÖ Inno Setup installed successfully at: $innoPath"
            } else {
              echo "‚ùå Installation verification failed"
              exit 1
            }
          } else {
            echo "‚ùå Download failed"
            exit 1
          }
        }
        
        # Set environment variable for subsequent steps
        echo "INNO_SETUP_COMPILER=$innoPath" >> $env:GITHUB_ENV
        echo "\n=== Environment Variable Set ==="
        echo "INNO_SETUP_COMPILER=$innoPath"
        
        # Verify compiler works
        echo "\n=== Verifying Compiler ==="
        & $innoPath /?
      shell: powershell
      
    - name: Test simple Inno Setup script
      run: |
        echo "=== Testing Simple Inno Setup Script ==="
        
        # Create a simple test script
        $testScript = @'
        [Setup]
        AppName=Test Application
        AppVersion=1.0
        DefaultDirName={autopf}\TestApp
        OutputDir=.
        OutputBaseFilename=TestAppSetup
        
        [Files]
        ; No files for this test
        
        [Code]
        function InitializeSetup(): Boolean;
        begin
          MsgBox('This is a test installation script.', mbInformation, MB_OK);
          Result := False; // Don't actually install anything
        end;
        '@
        
        $scriptPath = "test-script.iss"
        $testScript | Out-File -FilePath $scriptPath -Encoding UTF8
        
        echo "Created test script: $scriptPath"
        echo "\n=== Script Content ==="
        Get-Content $scriptPath
        
        # Compile the script
        echo "\n=== Compiling Test Script ==="
        
        # Use environment variable set in previous step
        $innoPath = $env:INNO_SETUP_COMPILER
        
        if ($innoPath -and (Test-Path $innoPath)) {
          echo "Using Inno Setup compiler: $innoPath"
          
          & $innoPath $scriptPath
          
          if ($LASTEXITCODE -eq 0) {
            echo "‚úÖ Script compiled successfully"
            
            # Check if setup file was created
            if (Test-Path "TestAppSetup.exe") {
              echo "‚úÖ Setup file created: TestAppSetup.exe"
              echo "File size: $((Get-Item 'TestAppSetup.exe').Length) bytes"
            } else {
              echo "‚ùå Setup file not found"
            }
          } else {
            echo "‚ùå Script compilation failed with exit code: $LASTEXITCODE"
            exit 1
          }
        } else {
          echo "‚ùå Inno Setup compiler not found in environment variable"
          echo "INNO_SETUP_COMPILER=$env:INNO_SETUP_COMPILER"
          exit 1
        }
      shell: powershell
      
    - name: Test project Inno Setup script
      run: |
        echo "=== Testing Project Inno Setup Script ==="
        
        $projectScript = "build_tools\scripts\installer.iss"
        
        if (Test-Path $projectScript) {
          echo "Found project script: $projectScript"
          
          # Show script content (first 50 lines)
          echo "\n=== Script Preview ==="
          Get-Content $projectScript | Select-Object -First 50
          
          # Try to compile (this will likely fail due to missing files, but we can test syntax)
          echo "\n=== Testing Script Syntax ==="
          $innoPath = $env:INNO_SETUP_COMPILER
          
          # Create dummy directories and files for testing
          $buildDir = "build\windows\x64\runner\Release"
          New-Item -ItemType Directory -Path $buildDir -Force | Out-Null
          
          # Create dummy executable
          "dummy content" | Out-File -FilePath "$buildDir\quick_start.exe" -Encoding UTF8
          
          # Create dummy DLL files
          $dllFiles = @(
            "flutter_windows.dll",
            "WinSparkle.dll",
            "auto_updater_windows_plugin.dll",
            "connectivity_plus_plugin.dll",
            "desktop_drop_plugin.dll",
            "hotkey_manager_windows_plugin.dll",
            "screen_retriever_plugin.dll",
            "url_launcher_windows_plugin.dll",
            "window_manager_plugin.dll"
          )
          
          foreach ($dll in $dllFiles) {
            "dummy content" | Out-File -FilePath "$buildDir\$dll" -Encoding UTF8
          }
          
          # Create dummy data directory
          New-Item -ItemType Directory -Path "$buildDir\data" -Force | Out-Null
          "dummy data" | Out-File -FilePath "$buildDir\data\test.txt" -Encoding UTF8
          
          # Try to compile
          try {
            & $innoPath $projectScript
            
            if ($LASTEXITCODE -eq 0) {
              echo "‚úÖ Project script compiled successfully"
            } else {
              echo "‚ö†Ô∏è Project script compilation failed (expected due to missing real files)"
              echo "Exit code: $LASTEXITCODE"
            }
          } catch {
            echo "‚ö†Ô∏è Compilation error (expected): $($_.Exception.Message)"
          }
        } else {
          echo "‚ùå Project script not found: $projectScript"
        }
      shell: powershell
      
  # advanced:
  #   name: Advanced Inno Setup Test
  #   runs-on: windows-latest
  #   needs: basic
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Setup Flutter
  #     uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: ${{ env.FLUTTER_VERSION }}
        
  #   - name: Enable Windows desktop
  #     run: flutter config --enable-windows-desktop
      
  #   - name: Get dependencies
  #     run: flutter pub get
      
  #   - name: Setup Inno Setup Environment
  #     run: |
  #       echo "=== Setting up Inno Setup Environment ==="
        
  #       # Function to find Inno Setup compiler
  #       function Find-InnoSetupCompiler {
  #         # Check in PATH first
  #         $pathInno = Get-Command "ISCC.exe" -ErrorAction SilentlyContinue
  #         if ($pathInno) {
  #           return $pathInno.Source
  #         }
          
  #         # Check common installation paths
  #         $commonPaths = @(
  #           "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
  #           "C:\Program Files\Inno Setup 6\ISCC.exe",
  #           "C:\Program Files (x86)\Inno Setup 5\ISCC.exe",
  #           "C:\Program Files\Inno Setup 5\ISCC.exe"
  #         )
          
  #         foreach ($path in $commonPaths) {
  #           if (Test-Path $path) {
  #             return $path
  #           }
  #         }
          
  #         return $null
  #       }
        
  #       # Find existing installation
  #       $innoPath = Find-InnoSetupCompiler
        
  #       if ($innoPath) {
  #         echo "‚úÖ Inno Setup found at: $innoPath"
  #         echo "‚ÑπÔ∏è Using existing installation"
  #       } else {
  #         echo "üì• Inno Setup not found, proceeding with installation"
          
  #         # Download Inno Setup
  #         $downloadUrl = "https://jrsoftware.org/download.php/is.exe"
  #         $installerPath = "$env:TEMP\innosetup-installer.exe"
          
  #         echo "Downloading Inno Setup from: $downloadUrl"
  #         Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
  #         Start-Process -FilePath $installerPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait
          
  #         # Find the newly installed compiler
  #         $innoPath = Find-InnoSetupCompiler
          
  #         if ($innoPath) {
  #           echo "‚úÖ Inno Setup installed successfully at: $innoPath"
  #         } else {
  #           echo "‚ùå Installation verification failed"
  #           exit 1
  #         }
  #       }
        
  #       # Set environment variable for subsequent steps
  #       echo "INNO_SETUP_COMPILER=$innoPath" >> $env:GITHUB_ENV
  #       echo "\n=== Environment Variable Set ==="
  #       echo "INNO_SETUP_COMPILER=$innoPath"
  #     shell: powershell
      
  #   - name: Build Flutter app (minimal)
  #     run: |
  #       echo "=== Building Flutter App ==="
  #       flutter build windows --release
        
  #       # Verify build output
  #       $buildDir = "build\windows\x64\runner\Release"
  #       if (Test-Path $buildDir) {
  #         echo "‚úÖ Build directory exists"
  #         echo "\n=== Build Output ==="
  #         Get-ChildItem $buildDir -Name
  #       } else {
  #         echo "‚ùå Build directory not found"
  #         exit 1
  #       }
      
  #   - name: Test complete build process
  #     run: |
  #       echo "=== Testing Complete Build Process ==="
        
  #       # Use environment variable set in previous step
  #       $innoPath = $env:INNO_SETUP_COMPILER
  #       $projectScript = "build_tools\scripts\installer.iss"
        
  #       if ($innoPath -and (Test-Path $innoPath)) {
  #         echo "Using Inno Setup compiler: $innoPath"
          
  #         if (Test-Path $projectScript) {
  #           echo "Compiling installer with real Flutter build..."
            
  #           try {
  #             & $innoPath $projectScript
              
  #             if ($LASTEXITCODE -eq 0) {
  #               echo "‚úÖ Installer compiled successfully"
                
  #               # Look for generated installer
  #               $distDir = "dist"
  #               if (Test-Path $distDir) {
  #                 echo "\n=== Generated Files ==="
  #                 Get-ChildItem $distDir -Recurse -Name
  #               }
  #             } else {
  #               echo "‚ùå Installer compilation failed with exit code: $LASTEXITCODE"
  #             }
  #           } catch {
  #             echo "‚ùå Compilation error: $($_.Exception.Message)"
  #           }
  #         } else {
  #           echo "‚ùå Project script not found"
  #         }
  #       } else {
  #         echo "‚ùå Inno Setup compiler not found in environment variable"
  #         echo "INNO_SETUP_COMPILER=$env:INNO_SETUP_COMPILER"
  #         exit 1
  #       }
  #     shell: powershell
      
  # full:
  #   name: Full Inno Setup Test
  #   runs-on: windows-latest
  #   needs: [basic, advanced]
  #   if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Setup Flutter
  #     uses: subosito/flutter-action@v2
  #     with:
  #       flutter-version: ${{ env.FLUTTER_VERSION }}
        
  #   - name: Enable Windows desktop
  #     run: flutter config --enable-windows-desktop
      
  #   - name: Get dependencies
  #     run: flutter pub get
      
  #   - name: Build Flutter app
  #     run: flutter build windows --release
      
  #   - name: Setup Inno Setup Environment
  #     run: |
  #       echo "=== Setting up Inno Setup Environment ==="
        
  #       # Function to find Inno Setup compiler
  #       function Find-InnoSetupCompiler {
  #         # Check in PATH first
  #         $pathInno = Get-Command "ISCC.exe" -ErrorAction SilentlyContinue
  #         if ($pathInno) {
  #           return $pathInno.Source
  #         }
          
  #         # Check common installation paths
  #         $commonPaths = @(
  #           "C:\Program Files (x86)\Inno Setup 6\ISCC.exe",
  #           "C:\Program Files\Inno Setup 6\ISCC.exe",
  #           "C:\Program Files (x86)\Inno Setup 5\ISCC.exe",
  #           "C:\Program Files\Inno Setup 5\ISCC.exe"
  #         )
          
  #         foreach ($path in $commonPaths) {
  #           if (Test-Path $path) {
  #             return $path
  #           }
  #         }
          
  #         return $null
  #       }
        
  #       # Find existing installation
  #       $innoPath = Find-InnoSetupCompiler
        
  #       if ($innoPath) {
  #         echo "‚úÖ Inno Setup found at: $innoPath"
  #         echo "‚ÑπÔ∏è Using existing installation"
  #       } else {
  #         echo "üì• Inno Setup not found, proceeding with installation"
          
  #         # Download Inno Setup
  #         $downloadUrl = "https://jrsoftware.org/download.php/is.exe"
  #         $installerPath = "$env:TEMP\innosetup-installer.exe"
          
  #         echo "Downloading Inno Setup from: $downloadUrl"
  #         Invoke-WebRequest -Uri $downloadUrl -OutFile $installerPath
  #         Start-Process -FilePath $installerPath -ArgumentList "/SILENT", "/SUPPRESSMSGBOXES" -Wait
          
  #         # Find the newly installed compiler
  #         $innoPath = Find-InnoSetupCompiler
          
  #         if ($innoPath) {
  #           echo "‚úÖ Inno Setup installed successfully at: $innoPath"
  #         } else {
  #           echo "‚ùå Installation verification failed"
  #           exit 1
  #         }
  #       }
        
  #       # Set environment variable for subsequent steps
  #       echo "INNO_SETUP_COMPILER=$innoPath" >> $env:GITHUB_ENV
  #       echo "\n=== Environment Variable Set ==="
  #       echo "INNO_SETUP_COMPILER=$innoPath"
  #     shell: powershell
      
  #   - name: Test complete build process
  #     run: |
  #       echo "=== Full Build and Package Test ==="
        
  #       # Use environment variable set in previous step
  #       $innoPath = $env:INNO_SETUP_COMPILER
  #       $projectScript = "build_tools\scripts\installer.iss"
        
  #       if ($innoPath -and (Test-Path $innoPath)) {
  #         echo "Using Inno Setup compiler: $innoPath"
          
  #         # Ensure dist directory exists
  #         New-Item -ItemType Directory -Path "dist" -Force | Out-Null
          
  #         # Compile installer
  #         & $innoPath $projectScript
          
  #         if ($LASTEXITCODE -eq 0) {
  #           echo "‚úÖ Full build process completed successfully"
            
  #           # Show final results
  #           echo "\n=== Final Build Results ==="
  #           if (Test-Path "dist") {
  #             Get-ChildItem "dist" -Recurse | ForEach-Object {
  #               echo "$($_.FullName) - $($_.Length) bytes"
  #             }
  #           }
  #         } else {
  #           echo "‚ùå Full build process failed"
  #           exit 1
  #         }
  #       } else {
  #         echo "‚ùå Inno Setup compiler not found in environment variable"
  #         echo "INNO_SETUP_COMPILER=$env:INNO_SETUP_COMPILER"
  #         exit 1
  #       }
  #     shell: powershell
      
  #   - name: Upload installer artifact
  #     if: success()
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: inno-setup-installer
  #       path: dist/
  #       retention-days: 7