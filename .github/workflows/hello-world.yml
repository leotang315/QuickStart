# 最简单的GitHub Actions示例
# 用于学习基本语法和概念

name: Hello World
# 触发条件：手动触发，方便学习测试
on:
  workflow_dispatch:  # 允许在GitHub网页上手动运行
    inputs:  # 定义输入参数
      name:
        description: '你的名字'
        required: true
        default: 'World'
        type: string
      greeting:
        description: '问候语'
        required: false
        default: 'Hello'
        type: choice
        options:
        - Hello
        - Hi
        - Hey

# 环境变量（全局）
env:
  GLOBAL_VAR: 'This is a global variable'

jobs:
  # 第一个任务：基础示例
  basic-example:
    name: 基础示例
    runs-on: ubuntu-latest  # 运行环境
    
    # 任务级别的环境变量
    env:
      JOB_VAR: 'This is a job variable'
    
    steps:
    # 步骤1：简单的echo命令
    - name: 打印问候语
      run: |
        echo "${{ inputs.greeting }} ${{ inputs.name }}!"
        echo "当前时间: $(date)"
    
    # 步骤2：使用环境变量
    - name: 显示环境变量
      run: |
        echo "全局变量: $GLOBAL_VAR"
        echo "任务变量: $JOB_VAR"
        echo "GitHub提供的变量:"
        echo "  仓库名: $GITHUB_REPOSITORY"
        echo "  分支名: $GITHUB_REF_NAME"
        echo "  运行ID: $GITHUB_RUN_ID"
    
    # 步骤3：创建文件并设置输出
    - name: 创建文件并设置输出
      id: create-file  # 给步骤设置ID，用于后续引用
      run: |
        echo "Hello from GitHub Actions!" > hello.txt
        echo "文件内容:" 
        cat hello.txt
        # 设置输出变量
        echo "file-content=Hello from GitHub Actions!" >> $GITHUB_OUTPUT
        echo "timestamp=$(date)" >> $GITHUB_OUTPUT
    
    # 步骤4：使用前一步的输出
    - name: 使用输出变量
      run: |
        echo "文件内容: ${{ steps.create-file.outputs.file-content }}"
        echo "创建时间: ${{ steps.create-file.outputs.timestamp }}"
    
    # 步骤5：条件执行
    - name: 条件执行示例
      if: inputs.name == 'Admin'  # 只有当输入名字是Admin时才执行
      run: echo "欢迎管理员！"
  
  # 第二个任务：演示任务依赖
  dependent-job:
    name: 依赖任务示例
    runs-on: ubuntu-latest
    needs: basic-example  # 依赖第一个任务完成
    
    steps:
    - name: 依赖任务执行
      run: |
        echo "这个任务在basic-example完成后才会执行"
        echo "演示任务之间的依赖关系"
  
  # 第三个任务：演示并行执行
  parallel-job:
    name: 并行任务示例
    runs-on: ubuntu-latest
    # 注意：这个任务没有needs，所以会与basic-example并行执行
    
    steps:
    - name: 并行执行
      run: |
        echo "这个任务与basic-example并行执行"
        echo "演示并行处理能力"
        sleep 5  # 模拟一些处理时间
        echo "并行任务完成"
  
  # 第四个任务：演示矩阵策略
  matrix-job:
    name: 矩阵策略示例
    runs-on: ${{ matrix.os }}  # 使用矩阵中的操作系统
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # 在多个操作系统上运行
        version: ['1.0', '2.0']  # 测试多个版本
    
    steps:
    - name: 显示矩阵信息
      run: |
        echo "操作系统: ${{ matrix.os }}"
        echo "版本: ${{ matrix.version }}"
        echo "这个任务会在不同的操作系统和版本组合下运行"