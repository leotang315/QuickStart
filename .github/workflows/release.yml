# 自动发布工作流
# 演示持续部署(CD)：自动创建GitHub Release并上传构建产物

name: Release

# 触发条件：当推送版本标签时
on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
  
env:
  FLUTTER_VERSION: '3.29.0'
permissions: write-all

jobs:
  # 创建Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Extract changelog
      id: changelog 
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        VERSION_NO_V=${VERSION#v}

        # 检查版本是否存在
        if ! grep -q "^## \[$VERSION_NO_V\]" docs/CHANGELOG.md; then
            echo "Version $VERSION not found in docs/CHANGELOG.md"
            echo "content=Release $VERSION" >> $GITHUB_OUTPUT
            exit 0
        fi
        
        # 提取changelog内容
        START_LINE=$(grep -n "^## \[$VERSION_NO_V\]" docs/CHANGELOG.md | cut -d: -f1)
        NEXT_LINE=$(tail -n +$((START_LINE + 1)) docs/CHANGELOG.md | grep -n "^## \[" | head -1 | cut -d: -f1)
        
        if [ -z "$NEXT_LINE" ]; then
            # 第一个版本或最新版本，输出到文件末尾
            CONTENT=$(tail -n +$START_LINE docs/CHANGELOG.md)
        else
            # 输出到下一个版本之前
            END_LINE=$((START_LINE + NEXT_LINE - 1))
            CONTENT=$(sed -n "${START_LINE},${END_LINE}p" docs/CHANGELOG.md)
        fi
        
        # 输出到GitHub Actions
        echo "content<<EOF" >> $GITHUB_OUTPUT
        echo "$CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: false
  
  # 构建并上传Windows版本
  build-and-upload-windows:
    name: Build and Upload Windows
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
    
    - name: Run build script
      id: build
      run: |
        .\build_tools\scripts\build.bat
    
    - name: Get installer information
      id: installer_info
      run: |
        $installerPath = Get-ChildItem -Path dist\installer\*.exe | Select-Object -ExpandProperty FullName
        echo "INSTALLER_PATH=$installerPath" >> $env:GITHUB_OUTPUT
        $installerFileName = Split-Path $installerPath -Leaf
        echo "INSTALLER_FILENAME=$installerFileName" >> $env:GITHUB_OUTPUT
    
    - name: Upload Windows Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ steps.installer_info.outputs.INSTALLER_PATH }}
        asset_name: ${{ steps.installer_info.outputs.INSTALLER_FILENAME }}
        asset_content_type: application/octet-stream
    
    # 上传appcast.xml文件
    - name: Upload appcast.xml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: dist/updater/appcast.xml
        asset_name: appcast.xml
        asset_content_type: application/xml




  